pipeline {
    agent {
        docker {
            image 'maven:3.8.1-jdk-8'
        }
    }

    environment {
        DOCKER_IMAGE = 'your-docker-repo/boxfuse-hello' // Название вашего Docker образа
        DOCKER_REGISTRY = 'your-docker-registry.com' // Ваш Docker Registry
        DOCKER_CREDENTIALS = 'docker-creds' // Jenkins credentials ID для Docker
    }

    stages {
        stage('Clone project from github') {
            steps {
                git(url: 'https://github.com/boxfuse/boxfuse-sample-java-war-hello.git', branch: 'master')
            }
        }

        stage('Build WAR') {
            steps {
                sh 'mvn package'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'cp target/hello-1.0.war ./docker/'
                sh '''
                docker build -t ${DOCKER_IMAGE}:1.0.0 ./docker
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                // Вход в Docker Registry
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin ${DOCKER_REGISTRY}"
                }
                // Пуш Docker-образа
                sh "docker tag ${DOCKER_IMAGE}:${BUILD_NUMBER} ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}"
                sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}"
            }
        }

        stage('Deploy') {
            steps {
                // Пример деплоя Docker-образа на удаленный сервер
                sh '''
                ssh user@remote-server << EOF
                docker pull ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}
                docker stop boxfuse-hello || true
                docker rm boxfuse-hello || true
                docker run -d --name boxfuse-hello -p 8080:8080 ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}
                EOF
                '''
            }
        }
    }

    post {
        always {
            // Очистка рабочих файлов
            cleanWs()
        }
    }
}
